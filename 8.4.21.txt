
# Given an array of positive numbers and a positive number ‘S,’ 
# find the length of the smallest contiguous subarray whose sum is greater than 
# or equal to ‘S’. Return 0 if no such subarray exists.

# Input: [2, 1, 5, 2, 3, 2], S=7 
# Output: 2
# Explanation: The smallest subarray with a sum greater than or equal to '7' is [5, 2].

# Input: [2, 1, 5, 2, 8], S=7 
# Output: 1
# Explanation: The smallest subarray with a sum greater than or equal to '7' is [8].

# Input: [3, 4, 1, 1, 6], S=8 
# Output: 3
# Explanation: Smallest subarrays with a sum greater than or equal to '8' are [3, 4, 1] 
# or [1, 1, 6].

def smallest_subarray_with_given_sum(s, arr):
  sub_sum = 0
  smallest_length = len(arr) + 1
  back_pointer = 0

  for index, num in enumerate(arr): #index = 3.  back_pointer = 2
    sub_sum += arr[index] # 
    while sub_sum >= s:
      if index - back_pointer + 1 < smallest_length:
        smallest_length = index - back_pointer + 1 #3
      sub_sum -= arr[back_pointer] #7
      back_pointer += 1

  if smallest_length == len(arr) + 1:
    return 0
  else:
    return smallest_length

print(smallest_subarray_with_given_sum(50,  [2, 1, 5, 2, 3, 2]))